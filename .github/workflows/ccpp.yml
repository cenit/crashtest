name: ci

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  schedule:
    - cron: '0 8 * * 1'

env:
  VCPKG_BINARY_SOURCES: 'clear;nuget,vcpkgbinarycache,readwrite'

jobs:

  ort:
    runs-on: ubuntu-latest
    steps:
    - name: Use HTTPS instead of SSH for Git cloning
      run: git config --global url.https://github.com/.insteadOf ssh://git@github.com/
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Get cached licencpp artifact
      uses: dawidd6/action-download-artifact@v3
      with:
        repo: cenit/licencpp
        branch: master
        workflow: ccpp.yml
        workflow_conclusion: success
        name: licencpp-${{ runner.os }}
    - name: 'Setup vcpkg'
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
    - name: Create yml ort file from vcpkg.json
      run: >
        chmod 755 ./licencpp ;
        ./licencpp --vcpkg_ports_dir=./vcpkg/ports --vcpkg_executable=./vcpkg/vcpkg ;
        rm -rf vcpkg
    - name: Run GitHub Action for ORT
      uses: oss-review-toolkit/ort-ci-github-action@v1
      with:
        image: 'ghcr.io/oss-review-toolkit/ort:latest'

  ubuntu-vcpkg:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - uses: lukka/get-cmake@latest

    - name: Update apt
      run: sudo apt update
    - name: Install dependencies
      run: sudo apt-get install -y --no-install-recommends yasm nasm gperf automake autoconf libtool pkg-config autoconf-archive libgles2-mesa-dev libx11-dev libxft-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxdamage-dev libxinerama-dev libdbus-1-dev libxtst-dev
    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json

    - name: Setup NuGet API key if found
      shell: bash
      env:
        BAGET_API_KEY: ${{ secrets.BAGET_API_KEY }}
      if: env.BAGET_API_KEY != null
      run: >
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ${{ github.workspace }}/ci/build.ps1 -UseVCPKG -DoNotUpdateVCPKG -DisableInteractive -DoNotUpdateTOOL


  osx-vcpkg:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - name: Install dependencies
      run: brew install libomp yasm nasm

    - uses: lukka/get-cmake@latest

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json

    - name: Setup NuGet API key if found
      shell: bash
      env:
        BAGET_API_KEY: ${{ secrets.BAGET_API_KEY }}
      if: env.BAGET_API_KEY != null
      run: >
        mono $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ${{ github.workspace }}/ci/build.ps1 -UseVCPKG -DoNotUpdateVCPKG -DisableInteractive -DoNotUpdateTOOL


  win-vcpkg:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

    - uses: lukka/get-cmake@latest

    - name: 'Setup vcpkg and NuGet artifacts backend'
      shell: bash
      run: >
        git clone https://github.com/microsoft/vcpkg ;
        ./vcpkg/bootstrap-vcpkg.sh ;
        $(./vcpkg/vcpkg fetch nuget | tail -n 1) sources add
        -Name "vcpkgbinarycache"
        -Source http://93.49.111.10:5555/v3/index.json

    - name: Setup NuGet API key if found
      shell: bash
      env:
        BAGET_API_KEY: ${{ secrets.BAGET_API_KEY }}
      if: env.BAGET_API_KEY != null
      run: >
        $(./vcpkg/vcpkg fetch nuget | tail -n 1)
        setapikey ${{ secrets.BAGET_API_KEY }}
        -Source http://93.49.111.10:5555/v3/index.json

    - name: 'Build'
      shell: pwsh
      run: ${{ github.workspace }}/ci/build.ps1 -UseVCPKG -DoNotUpdateVCPKG -DisableInteractive -DoNotUpdateTOOL
